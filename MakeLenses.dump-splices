MakeLenses.hs:8:1-99: Splicing declarations
    makeLensesFor
      [("name", "_name"), ("err", "_err"), ("contents", "_contents"),
       ("file", "_file")]
      ''DirTree
  ======>
    _contents ::
      forall n_ib61
             a_ib62. Control.Lens.Type.Traversal' (DirTree n_ib61 a_ib62) [DirTree n_ib61 a_ib62]
    _contents _ (Failed x1_ab69 x2_ab6a)
      = pure (Failed x1_ab69 x2_ab6a)
    _contents f_ab6b (Dir x1_ab6c x2_ab6d)
      = fmap (\ y1_ab6e -> Dir x1_ab6c y1_ab6e) (f_ab6b x2_ab6d)
    _contents _ (File x1_ab6f x2_ab6g) = pure (File x1_ab6f x2_ab6g)
    {-# INLINE _contents #-}
    _err ::
      forall n_ib61
             a_ib62. Control.Lens.Type.Traversal' (DirTree n_ib61 a_ib62) GHC.IO.Exception.IOException
    _err f_ab6h (Failed x1_ab6i x2_ab6j)
      = fmap (\ y1_ab6k -> Failed x1_ab6i y1_ab6k) (f_ab6h x2_ab6j)
    _err _ (Dir x1_ab6l x2_ab6m) = pure (Dir x1_ab6l x2_ab6m)
    _err _ (File x1_ab6n x2_ab6o) = pure (File x1_ab6n x2_ab6o)
    {-# INLINE _err #-}
    _file ::
      forall n_ib61
             a_ib62. Control.Lens.Type.Traversal' (DirTree n_ib61 a_ib62) a_ib62
    _file _ (Failed x1_ab6p x2_ab6q) = pure (Failed x1_ab6p x2_ab6q)
    _file _ (Dir x1_ab6r x2_ab6s) = pure (Dir x1_ab6r x2_ab6s)
    _file f_ab6t (File x1_ab6u x2_ab6v)
      = fmap (\ y1_ab6w -> File x1_ab6u y1_ab6w) (f_ab6t x2_ab6v)
    {-# INLINE _file #-}
    _name ::
      forall n_ib61
             a_ib62. Control.Lens.Type.Lens' (DirTree n_ib61 a_ib62) n_ib61
    _name f_ab6x (Failed x1_ab6y x2_ab6z)
      = fmap (\ y1_ab6A -> Failed y1_ab6A x2_ab6z) (f_ab6x x1_ab6y)
    _name f_ab6B (Dir x1_ab6C x2_ab6D)
      = fmap (\ y1_ab6E -> Dir y1_ab6E x2_ab6D) (f_ab6B x1_ab6C)
    _name f_ab6F (File x1_ab6G x2_ab6H)
      = fmap (\ y1_ab6I -> File y1_ab6I x2_ab6H) (f_ab6F x1_ab6G)
    {-# INLINE _name #-}
MakeLenses.hs:9:1-77: Splicing declarations
    makeLensesFor
      [("anchor", "_anchor"), ("dirTree", "_dirTree")] ''AnchoredDirTree
  ======>
    _anchor ::
      forall n_ib87
             a_ib88. Control.Lens.Type.Lens' (AnchoredDirTree n_ib87 a_ib88) FilePath
    _anchor f_abc6 ((:/) x1_abc7 x2_abc8)
      = fmap (\ y1_abc9 -> (:/) y1_abc9 x2_abc8) (f_abc6 x1_abc7)
    {-# INLINE _anchor #-}
    _dirTree ::
      forall n_ib87
             a_ib88
             n_abc4
             a_abc5. Control.Lens.Type.Lens (AnchoredDirTree n_ib87 a_ib88) (AnchoredDirTree n_abc4 a_abc5) (DirTree n_ib87 a_ib88) (DirTree n_abc4 a_abc5)
    _dirTree f_abca ((:/) x1_abcb x2_abcc)
      = fmap (\ y1_abcd -> (:/) x1_abcb y1_abcd) (f_abca x2_abcc)
    {-# INLINE _dirTree #-}
